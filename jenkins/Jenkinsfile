pipeline {
    agent any
    
    parameters {
        string(name: 'AWS_REGION', defaultValue: 'us-west-2', description: 'AWS region for EKS cluster')
        string(name: 'CLUSTER_NAME', defaultValue: 'jenkins-eks-cluster', description: 'jenkins-eks-cluster')
        choice(name: 'ENVIRONMENT', choices: 'dev', description: 'Deployment environment')
        string(name: 'TERRAFORM_VERSION', defaultValue: '1.5.7', description: 'Terraform version')
    }
    
    environment {
        AWS_ACCESS_KEY_ID = Credentials('AWS_ACCESS_KEY_ID')
        aws_secret_access_key = Credentials('AWS_SECRET_ACCESS_KEY')
        // AWS_REGION = "${params.AWS_REGION}"
        // CLUSTER_NAME = "${params.CLUSTER_NAME}"
        // ENVIRONMENT = "${params.ENVIRONMENT}"
        // TERRAFORM_VERSION = "${params.TERRAFORM_VERSION}"
        // KUBECTL_VERSION = '1.28.0'
        // S3_BUCKET = "eks-tf-state-${ENVIRONMENT}-salman"
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    bat """
                    aws configure set aws_access_key_id %AWS_ACCESS_KEY_ID%
                    aws configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY%
                    aws configure set region %AWS_REGION%
                    aws configure set output json
                    aws sts get-caller-identity
                    """
                }
            }
        }

        stage('Setup Tools') {
            steps {
                script {
                    bat """
                    echo Installing Terraform %TERRAFORM_VERSION%...
                    powershell -Command "Invoke-WebRequest -Uri 'https://releases.hashicorp.com/terraform/%TERRAFORM_VERSION%/terraform_%TERRAFORM_VERSION%_windows_amd64.zip' -OutFile 'terraform.zip'"
                    powershell -Command "Expand-Archive -Path terraform.zip -DestinationPath . -Force"
                    move terraform.exe C:\\Windows\\System32\\
                    terraform --version

                    echo Installing kubectl %KUBECTL_VERSION%...
                    powershell -Command "Invoke-WebRequest -Uri 'https://dl.k8s.io/release/v%KUBECTL_VERSION%/bin/windows/amd64/kubectl.exe' -OutFile 'kubectl.exe'"
                    move kubectl.exe C:\\Windows\\System32\\
                    kubectl version --client
                    """
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    bat """
                    terraform init -reconfigure -backend-config="bucket=%S3_BUCKET%" -backend-config="key=eks-cluster/terraform.tfstate" -backend-config="region=%AWS_REGION%" -backend-config="encrypt=true"
                    """
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                dir('terraform') {
                    bat 'terraform validate'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    bat "terraform plan -var='aws_region=${AWS_REGION}' -var='cluster_name=${CLUSTER_NAME}' -var='environment=${ENVIRONMENT}' -out=tfplan"
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                input message: 'Approve Terraform Apply?'
                dir('terraform') {
                    bat 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Configure Kubectl') {
            steps {
                bat "aws eks update-kubeconfig --region %AWS_REGION% --name %CLUSTER_NAME%"
            }
        }

        stage('Verify Cluster') {
            steps {
                bat "kubectl get nodes"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "✅ EKS cluster deployed successfully!"
        }
        failure {
            echo "❌ Pipeline failed — check logs."
        }
    }
}


